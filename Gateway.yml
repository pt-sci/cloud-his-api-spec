openapi: "3.0.2"
info:
  title: Cloud HIS Gateway
  version: "1.0"
  description: API Gateway for HIS platform

servers:
  - url: https://cloud-his-server.online

components:
  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerToken: []

tags:
  - name: auth
    description: Authenticate user
  - name: organization
    description: Operation about the organization
  - name: employee
    description: Operation about employee
  - name: user
    description: Operations about user account

paths:
  /login:
    post:
      tags:
        - auth
      summary: Log the user to the system
      description: log the user to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                employeeNo:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successfully logged the user in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /organization/{id}:
    get:
      tags:
        - organization
      summary: Get information about spesific organization
      description: Obtain information about an organization based on its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully obtain information about an organization
          content:
            application/json:
              schema:
                $ref: "./schemas/Organization.yaml"
    put:
      tags:
        - organization
      summary: Update the information about spesific organization
      description: Update an organization based on its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/OrganizationPost.yaml"
      responses:
        "200":
          description: Successfully update organization data
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /entities:
    get:
      description: Returns list of entity the organization have
      parameters:
        - name: org
          in: query
          description: Organization id
          schema:
            type: string
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
        - name: offset
          in: query
          description: Specifies the number of data is skipped
          schema:
            type: integer
      responses:
        "200":
          description: Successfully returned a list of entities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/Entities.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    post:
      description: Create a new entities for this organization
      parameters:
        - name: org
          in: query
          description: Organization id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/EntitiesPost.yaml"
      responses:
        "201":
          description: Successfully create a new entity
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /entity/{id}:
    get:
      description: Obtain information about an organization entity based on its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully obtain information about an organization entity
          content:
            application/json:
              schema:
                $ref: "./schemas/Entities.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    put:
      description: Update information about an organization entity based on its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/EntitiesPost.yaml"
      responses:
        "200":
          description: Successfully update entity data
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    patch:
      description: Do spesific action on the entity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  enum:
                    - CLOSE
                    - OPEN
      responses:
        "200":
          description: Successfully do the operation
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /units:
    get:
      description: Returns list of units the organization and entities have
      parameters:
        - name: org
          in: query
          description: Organization id
          schema:
            type: string
        - name: ent
          in: query
          description: Entity id
          schema:
            type: string
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
        - name: offset
          in: query
          description: Specifies the number of data is skipped
          schema:
            type: integer
      responses:
        "200":
          description: Successfully returned a list of units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/Unit.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    post:
      description: Create a new units for this entity
      parameters:
        - name: org
          in: query
          description: Organization id
          schema:
            type: string
        - name: ent
          in: query
          description: Entity id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/UnitPost.yaml"
      responses:
        "201":
          description: Successfully create a new unit
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /unit/{id}:
    get:
      description: Obtain information about an unit based on its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully obtain information about an unit
          content:
            application/json:
              schema:
                $ref: "./schemas/Unit.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    put:
      description: Update information about an unit based on its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/UnitPost.yaml"
      responses:
        "200":
          description: Successfully update unit data
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    patch:
      description: Do spesific action on the unit
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  enum:
                    - DELETE
      responses:
        "200":
          description: Successfully do the operation
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /unit/{id}/availability:
    patch:
      description: Do spesific action on the unit
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  enum:
                    - AVAILABLE
                    - MAINTENANCE
                    - NOT-AVAILABLE
      responses:
        "200":
          description: Successfully do the operation
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /users:
    get:
      tags:
        - user
      summary: Get all user account for spesific organization
      description: Returns list of users the organization have
      parameters:
        - name: org
          in: query
          description: Organization id
          schema:
            type: string
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
        - name: offset
          in: query
          description: Specifies the number of data is skipped
          schema:
            type: integer
      responses:
        "200":
          description: Successfully returned a list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/User.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    post:
      tags:
        - user
      summary: Register a new user account for spesific organization
      description: Create a new user account
      parameters:
        - name: org
          in: query
          description: Organization id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/UserPost.yaml"
      responses:
        "201":
          description: Successfully create a new user account
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /user/{id}:
    get:
      tags:
        - user
      summary: Get information about spesific user account
      description: Obtain information about an user account based on its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully obtain information about an user account
          content:
            application/json:
              schema:
                $ref: "./schemas/User.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /user/{id}/assign:
    post:
      tags:
        - user
      summary: Assign an employee or role to spesific user account
      description: Assign employee or roles to user account
      parameters:
        - name: type
          in: query
          description: type of data to be assigned
          schema:
            type: string
            enum:
              - EMPLOYEES
              - ROLES
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "201":
          description: Successfully do the operation
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /user/reset-password:
    post:
      tags:
        - user
      summary: Reset or change the password of an user account
      description: Reset user account password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                old:
                  type: string
                new:
                  type: string
                repeat:
                  type: string
      responses:
        "201":
          description: Successfully reset user password
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /employees:
    get:
      tags:
        - employee
      summary: Get all registered employee
      description: Returns list of employee
      parameters:
        - name: org
          in: query
          description: Organization id
          schema:
            type: string
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
        - name: offset
          in: query
          description: Specifies the number of data is skipped
          schema:
            type: integer
      responses:
        "200":
          description: Successfully returned a list of employee
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/Employee.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    post:
      tags:
        - employee
      summary: Register an employee
      description: Register a new employee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/EmployeePost.yaml"
      responses:
        "201":
          description: Successfully registered a new employee
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      fullname:
                        type: string
                      mrn:
                        type: string
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /employee/{id}:
    get:
      tags:
        - employee
      summary: Get information about the spesific employee
      description: Obtain information about an employee based on its id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully obtain information about an employee
          content:
            application/json:
              schema:
                $ref: "./schemas/Employee.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    put:
      tags:
        - employee
      summary: Update employee information
      description: Update employee information based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/EmployeePost.yaml"
      responses:
        "200":
          description: Successfully update employee data
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /employee/{id}/assign:
    patch:
      tags:
        - employee
      summary: Assign an employee to entities or units
      description: Assign an employee to entities or units inside the organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: string
                  enum:
                    - ENTITIES
                    - UNITS
                id:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Successfully update an employee
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /patients:
    get:
      description: Returns list of patients
      parameters:
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
        - name: offset
          in: query
          description: Specifies the number of data is skipped
          schema:
            type: integer
      responses:
        "200":
          description: Successfully returned a list of patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/Patient.yaml"

        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    post:
      description: Register a new patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/PatientPost.yaml"
      responses:
        "201":
          description: Successfully registered a new patient
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      fullname:
                        type: string
                      mrn:
                        type: string
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /patient/{id}:
    get:
      description: Obtain information about an patient from their id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully returned an patient
          content:
            application/json:
              schema:
                $ref: "./schemas/Patient.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    put:
      description: Update a patient based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/PatientPost.yaml"
      responses:
        "200":
          description: Successfully update patient data
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    patch:
      description: Do spesific action on the patient
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  enum:
                    - BLOCK
                    - DEACTIVE
                    - DEAD
      responses:
        "200":
          description: Successfully do the operation
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /appointments:
    get:
      description: Returns list of appointments
      parameters:
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
        - name: offset
          in: query
          description: Specifies the number of data is skipped
          schema:
            type: integer
      responses:
        "200":
          description: Successfully returned a list of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/Appointment.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    post:
      description: Create an appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/AppointmentPost.yaml"
      responses:
        "201":
          description: Successfully create an appointment
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /appointment/{id}:
    get:
      description: "Obtain information about an appointment based on its id"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully obtain information about an appointment"
          content:
            application/json:
              schema:
                $ref: "./schemas/Appointment.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    put:
      description: Update information about an appointment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/AppointmentPost.yaml"
      responses:
        "200":
          description: Successfully update information about an appointment
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    patch:
      description: Do specific operation to an appointment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  enum:
                    - CANCEL
                    - REGISTER
      responses:
        "200":
          description: Successfully do the operation
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /registrations:
    get:
      description: Return list of registrations
      parameters:
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
        - name: offset
          in: query
          description: Specifies the number of data is skipped
          schema:
            type: integer
      responses:
        "200":
          description: Successfully returned a list of resgistrations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/Registration.yaml"
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    post:
      description: Create an registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/RegistrationPost.yaml"
      responses:
        "201":
          description: Successfully create an registration
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /registration/{id}:
    get:
      description: Obtain information about an registration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully obtain information about an registration"
          content:
            application/json:
              schema:
                $ref: "./schemas/Registration.yaml"
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    put:
      description: Update information about an registration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "./schemas/RegistrationPost.yaml"
      responses:
        "200":
          description: Successfully update information about an registration
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
    patch:
      description: Do specific operation to an registration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  enum:
                    - CANCEL
      responses:
        "200":
          description: Successfully do the operation
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"

  /registration/{id}/service:
    patch:
      description: Do specific operation to registration service status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  enum:
                    - READY
                    - SERVE
                    - FINISH
      responses:
        "200":
          description: Successfully do the operation
        "400":
          $ref: "./responses/400.yaml"
        "401":
          $ref: "./responses/401.yaml"
